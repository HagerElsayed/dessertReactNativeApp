{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PlatformPressable;\n\nvar _extends3 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Animated = _interopRequireDefault(require(\"react-native-web/dist/exports/Animated\"));\n\nvar _Easing = _interopRequireDefault(require(\"react-native-web/dist/exports/Easing\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _Pressable = _interopRequireDefault(require(\"react-native-web/dist/exports/Pressable\"));\n\nvar _excluded = [\"onPressIn\", \"onPressOut\", \"android_ripple\", \"pressColor\", \"pressOpacity\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar AnimatedPressable = _Animated.default.createAnimatedComponent(_Pressable.default);\n\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar ANDROID_SUPPORTS_RIPPLE = _Platform.default.OS === 'android' && _Platform.default.Version >= ANDROID_VERSION_LOLLIPOP;\n\nfunction PlatformPressable(_ref) {\n  var onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      android_ripple = _ref.android_ripple,\n      pressColor = _ref.pressColor,\n      _ref$pressOpacity = _ref.pressOpacity,\n      pressOpacity = _ref$pressOpacity === void 0 ? 0.3 : _ref$pressOpacity,\n      style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _useTheme = (0, _native.useTheme)(),\n      dark = _useTheme.dark;\n\n  var _React$useState = React.useState(function () {\n    return new _Animated.default.Value(1);\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n      opacity = _React$useState2[0];\n\n  var animateTo = function animateTo(toValue, duration) {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    _Animated.default.timing(opacity, {\n      toValue: toValue,\n      duration: duration,\n      easing: _Easing.default.inOut(_Easing.default.quad),\n      useNativeDriver: true\n    }).start();\n  };\n\n  var handlePressIn = function handlePressIn(e) {\n    animateTo(pressOpacity, 0);\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n  };\n\n  var handlePressOut = function handlePressOut(e) {\n    animateTo(1, 200);\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n  };\n\n  return React.createElement(AnimatedPressable, _extends({\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? (0, _extends3.default)({\n      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)'\n    }, android_ripple) : undefined,\n    style: [{\n      opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1\n    }, style]\n  }, rest));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAMA,iBAAiB,GAAGC,kBAASC,uBAATD,CAAiCE,kBAAjCF,CAA1B;;AAEA,IAAMG,wBAAwB,GAAG,EAAjC;AACA,IAAMC,uBAAuB,GAC3BC,kBAASC,EAATD,KAAgB,SAAhBA,IAA6BA,kBAASE,OAATF,IAAoBF,wBADnD;;AAMe,SAASK,iBAAT,OAQL;EAAA,IAPRC,SAOQ,QAPRA,SAOQ;EAAA,IANRC,UAMQ,QANRA,UAMQ;EAAA,IALRC,cAKQ,QALRA,cAKQ;EAAA,IAJRC,UAIQ,QAJRA,UAIQ;EAAA,6BAHRC,YAGQ;EAAA,IAHRA,YAGQ,kCAHO,GAGP;EAAA,IAFRC,KAEQ,QAFRA,KAEQ;EAAA,IADLC,IACK;;EACR,gBAAiBC,uBAAjB;EAAA,IAAQC,IAAR,aAAQA,IAAR;;EACA,sBAAkBC,KAAK,CAACC,QAAND,CAAe;IAAA,OAAM,IAAIlB,kBAASoB,KAAb,CAAmB,CAAnB,CAAN;EAAA,CAAfF,CAAlB;EAAA;EAAA,IAAOG,OAAP;;EAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAkBC,QAAlB,EAAuC;IACvD,IAAIpB,uBAAJ,EAA6B;MAC3B;IACD;;IAEDJ,kBAASyB,MAATzB,CAAgBqB,OAAhBrB,EAAyB;MACvBuB,OADuB,EACvBA,OADuB;MAEvBC,QAFuB,EAEvBA,QAFuB;MAGvBE,MAAM,EAAEC,gBAAOC,KAAPD,CAAaA,gBAAOE,IAApBF,CAHe;MAIvBG,eAAe,EAAE;IAJM,CAAzB9B,EAKG+B,KALH/B;EALF;;EAaA,IAAMgC,aAAa,GAAIC,SAAjBD,aAAiBC,EAAD,EAA8B;IAClDX,SAAS,CAACT,YAAD,EAAe,CAAf,CAATS;IACAb,SAAS,SAATA,aAAS,WAATA,qBAAS,CAAGwB,CAAH,CAATxB;EAFF;;EAKA,IAAMyB,cAAc,GAAID,SAAlBC,cAAkBD,EAAD,EAA8B;IACnDX,SAAS,CAAC,CAAD,EAAI,GAAJ,CAATA;IACAZ,UAAU,SAAVA,cAAU,WAAVA,sBAAU,CAAGuB,CAAH,CAAVvB;EAFF;;EAKA,OACEQ,oBAACnB,iBAAD;IACEU,SAAS,EAAEuB,aADb;IAEEtB,UAAU,EAAEwB,cAFd;IAGEvB,cAAc,EACZP,uBAAuB;MAEjB+B,KAAK,EACHvB,UAAU,KAAKwB,SAAfxB,GACIA,UADJA,GAEIK,IAAI,GACJ,0BADI,GAEJ;IAPW,GAQdN,cARc,IAUnByB,SAdR;IAgBEtB,KAAK,EAAE,CAAC;MAAEO,OAAO,EAAE,CAACjB,uBAAD,GAA2BiB,OAA3B,GAAqC;IAAhD,CAAD,EAAsDP,KAAtD;EAhBT,GAiBMC,IAjBN,EADF;AAqBD","names":["AnimatedPressable","Animated","createAnimatedComponent","Pressable","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","OS","Version","PlatformPressable","onPressIn","onPressOut","android_ripple","pressColor","pressOpacity","style","rest","useTheme","dark","React","useState","Value","opacity","animateTo","toValue","duration","timing","easing","Easing","inOut","quad","useNativeDriver","start","handlePressIn","e","handlePressOut","color","undefined"],"sources":["PlatformPressable.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  PressableProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nexport type Props = Omit<PressableProps, 'style'> & {\n  pressColor?: string;\n  pressOpacity?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  children: React.ReactNode;\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport default function PlatformPressable({\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  style,\n  ...rest\n}: Props) {\n  const { dark } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue: number, duration: number) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n\n  return (\n    <AnimatedPressable\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? {\n              color:\n                pressColor !== undefined\n                  ? pressColor\n                  : dark\n                  ? 'rgba(255, 255, 255, .32)'\n                  : 'rgba(0, 0, 0, .32)',\n              ...android_ripple,\n            }\n          : undefined\n      }\n      style={[{ opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1 }, style]}\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"script"}