{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\"));\n\nvar _extends3 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _warnOnce = _interopRequireDefault(require(\"warn-once\"));\n\nvar _MaterialTopTabView = _interopRequireDefault(require(\"../views/MaterialTopTabView\"));\n\nvar _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n    _excluded2 = [\"swipeEnabled\", \"lazy\", \"lazyPlaceholder\", \"lazyPreloadDistance\", \"tabBarOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction MaterialTopTabNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      restWithDeprecated = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var swipeEnabled = restWithDeprecated.swipeEnabled,\n      lazy = restWithDeprecated.lazy,\n      lazyPlaceholder = restWithDeprecated.lazyPlaceholder,\n      lazyPreloadDistance = restWithDeprecated.lazyPreloadDistance,\n      tabBarOptions = restWithDeprecated.tabBarOptions,\n      rest = (0, _objectWithoutProperties2.default)(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n\n  if (tabBarOptions) {\n    (0, _extends3.default)(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    (0, _warnOnce.default)(tabBarOptions, \"Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.\");\n  }\n\n  var deprecatedProps = {\n    swipeEnabled: swipeEnabled,\n    lazy: lazy,\n    lazyPlaceholder: lazyPlaceholder,\n    lazyPreloadDistance: lazyPreloadDistance\n  };\n  Object.entries(deprecatedProps).forEach(function (_ref2) {\n    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n        propName = _ref3[0],\n        propValue = _ref3[1];\n\n    if (propValue !== undefined) {\n      defaultScreenOptions[propName] = propValue;\n      (0, _warnOnce.default)(true, \"Material Top Tab Navigator: '\" + propName + \"' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#\" + propName.toLowerCase() + \" for more details.\");\n    }\n  });\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.TabRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(_MaterialTopTabView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(MaterialTopTabNavigator);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["MaterialTopTabNavigator","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","tabBarOptions","rest","defaultScreenOptions","Object","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarPressColor","pressColor","tabBarPressOpacity","pressOpacity","tabBarShowLabel","showLabel","tabBarShowIcon","showIcon","tabBarAllowFontScaling","allowFontScaling","tabBarBounces","bounces","tabBarScrollEnabled","scrollEnabled","tabBarIconStyle","iconStyle","tabBarLabelStyle","labelStyle","tabBarItemStyle","tabStyle","tabBarBadge","renderBadge","tabBarIndicator","renderIndicator","tabBarIndicatorStyle","indicatorStyle","tabBarIndicatorContainerStyle","indicatorContainerStyle","tabBarContentContainerStyle","contentContainerStyle","tabBarStyle","style","keys","forEach","key","undefined","warnOnce","JSON","stringify","deprecatedProps","entries","propName","propValue","toLowerCase","useNavigationBuilder","TabRouter","state","descriptors","navigation","NavigationContent","React","MaterialTopTabView","createNavigatorFactory"],"sources":["createMaterialTopTabNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationEventMap,\n  MaterialTopTabNavigationOptions,\n} from '../types';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap\n> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  id,\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: swipeEnabled is deprecated\n    swipeEnabled,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: lazyPlaceholder is deprecated\n    lazyPlaceholder,\n    // @ts-expect-error: lazyPreloadDistance is deprecated\n    lazyPreloadDistance,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    (\n      Object.keys(\n        defaultScreenOptions\n      ) as (keyof MaterialTopTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  const deprecatedProps = {\n    swipeEnabled,\n    lazy,\n    lazyPlaceholder,\n    lazyPreloadDistance,\n  } as const;\n\n  Object.entries(deprecatedProps).forEach(([propName, propValue]) => {\n    if (propValue !== undefined) {\n      // @ts-expect-error: Object.entries doesn't return strict types\n      defaultScreenOptions[propName] = propValue;\n\n      warnOnce(\n        true,\n        `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`\n      );\n    }\n  });\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      MaterialTopTabNavigationOptions,\n      MaterialTopTabNavigationEventMap\n    >(TabRouter, {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <MaterialTopTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"]},"metadata":{},"sourceType":"script"}