{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createClass.js\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/inherits.js\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\"));\n\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar DiscreteGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(DiscreteGestureHandler, _GestureHandler);\n\n  var _super = (0, _createSuper2.default)(DiscreteGestureHandler);\n\n  function DiscreteGestureHandler() {\n    (0, _classCallCheck2.default)(this, DiscreteGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(DiscreteGestureHandler, [{\n    key: \"isDiscrete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, _ref2) {\n      var x = _ref.x,\n          y = _ref.y,\n          deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var maxDeltaX = _ref2.maxDeltaX,\n          maxDeltaY = _ref2.maxDeltaY,\n          maxDistSq = _ref2.maxDistSq,\n          shouldCancelWhenOutside = _ref2.shouldCancelWhenOutside;\n\n      if (shouldCancelWhenOutside) {\n        if (!this.isPointInView({\n          x: x,\n          y: y\n        })) {\n          return true;\n        }\n      }\n\n      return (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaX), maxDeltaX) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY), maxDeltaY) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref3) {\n      var _ref3$center = _ref3.center,\n          x = _ref3$center.x,\n          y = _ref3$center.y;\n      var rect = this.view.getBoundingClientRect();\n      return {\n        absoluteX: x,\n        absoluteY: y,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref4, _recognizer, _ref5) {\n      var minPointers = _ref4.minPointers,\n          maxPointers = _ref4.maxPointers,\n          maxDeltaX = _ref4.maxDeltaX,\n          maxDeltaY = _ref4.maxDeltaY,\n          maxDistSq = _ref4.maxDistSq,\n          shouldCancelWhenOutside = _ref4.shouldCancelWhenOutside;\n      var pointerLength = _ref5.maxPointers,\n          center = _ref5.center,\n          deltaX = _ref5.deltaX,\n          deltaY = _ref5.deltaY;\n      var validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n\n      if (this.shouldFailUnderCustomCriteria((0, _extends2.default)({}, center, {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }), {\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        maxDistSq: maxDistSq,\n        shouldCancelWhenOutside: shouldCancelWhenOutside\n      }) || !validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }]);\n  return DiscreteGestureHandler;\n}(_GestureHandler2.default);\n\nvar _default = DiscreteGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAEA;;AACA;;IAEeA,sB;;;;;;;;;;;;SACC,eAAG;MACf,OAAO,IAAP;IACD;;;SAE6B,eAAG;MAC/B,OAAO,IAAP;IACD;;;WAEDC,oDAGE;MAAA,IAFEC,CAEF,QAFEA,CAEF;MAAA,IAFKC,CAEL,QAFKA,CAEL;MAAA,IAFQC,MAER,QAFQA,MAER;MAAA,IAFgBC,MAEhB,QAFgBA,MAEhB;MAAA,IADEC,SACF,SADEA,SACF;MAAA,IADaC,SACb,SADaA,SACb;MAAA,IADwBC,SACxB,SADwBA,SACxB;MAAA,IADmCC,uBACnC,SADmCA,uBACnC;;MACA,IAAIA,uBAAJ,EAA6B;QAC3B,IAAI,CAAC,KAAKC,aAAL,CAAmB;UAAER,CAAF,EAAEA,CAAF;UAAKC;QAAL,CAAnB,CAAL,EAAmC;UACjC,OAAO,IAAP;QACD;MACF;;MACD,OACEQ,gCAAoBC,IAAI,CAACC,GAALD,CAASR,MAATQ,CAApBD,EAAsCL,SAAtCK,KACAA,gCAAoBC,IAAI,CAACC,GAALD,CAASP,MAATO,CAApBD,EAAsCJ,SAAtCI,CADAA,IAEAA,gCACEC,IAAI,CAACC,GAALD,CAASP,MAAM,GAAGA,MAATA,GAAkBD,MAAM,GAAGA,MAApCQ,CADFD,EAEEH,SAFFG,CAHF;IAQD;;;WAEDG,qCAAgD;MAAA,yBAAzBC,MAAyB;MAAA,IAAfb,CAAe,gBAAfA,CAAe;MAAA,IAAZC,CAAY,gBAAZA,CAAY;MAE9C,IAAMa,IAAI,GAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb;MAEA,OAAO;QACLC,SAAS,EAAEjB,CADN;QAELkB,SAAS,EAAEjB,CAFN;QAGLD,CAAC,EAAEA,CAAC,GAAGc,IAAI,CAACK,IAHP;QAILlB,CAAC,EAAEA,CAAC,GAAGa,IAAI,CAACM;MAJP,CAAP;IAMD;;;WAEDC,yCASEC,WATFD,SAWE;MAAA,IATEE,WASF,SATEA,WASF;MAAA,IAREC,WAQF,SAREA,WAQF;MAAA,IAPEpB,SAOF,SAPEA,SAOF;MAAA,IANEC,SAMF,SANEA,SAMF;MAAA,IALEC,SAKF,SALEA,SAKF;MAAA,IAJEC,uBAIF,SAJEA,uBAIF;MAAA,IADekB,aACf,SADED,WACF;MAAA,IAD8BX,MAC9B,SAD8BA,MAC9B;MAAA,IADsCX,MACtC,SADsCA,MACtC;MAAA,IAD8CC,MAC9C,SAD8CA,MAC9C;MACA,IAAMuB,iBAAiB,GACrBD,aAAa,IAAIF,WAAjBE,IAAgCA,aAAa,IAAID,WADnD;;MAGA,IACE,KAAKzB,6BAAL,4BACOc,MADP;QACeX,MAAb,EAAaA,MADf;QACuBC;MADvB,IAEE;QACEC,SADF,EACEA,SADF;QAEEC,SAFF,EAEEA,SAFF;QAGEC,SAHF,EAGEA,SAHF;QAIEC;MAJF,CAFF,KAWC,CAACmB,iBAAD,IAAsB,KAAKC,gBAZ9B,EAaE;QACA,OAAO;UAAEC,MAAM,EAAE;QAAV,CAAP;MACD;;MAED,OAAO;QAAEC,OAAO,EAAEH;MAAX,CAAP;IACD;;;EAzE2CI,wB;;eA4E/BhC,sB","names":["DiscreteGestureHandler","shouldFailUnderCustomCriteria","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","TEST_MAX_IF_NOT_NAN","Math","abs","transformNativeEvent","center","rect","view","getBoundingClientRect","absoluteX","absoluteY","left","top","isGestureEnabledForEvent","_recognizer","minPointers","maxPointers","pointerLength","validPointerCount","isGestureRunning","failed","success","GestureHandler"],"sources":["DiscreteGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"script"}