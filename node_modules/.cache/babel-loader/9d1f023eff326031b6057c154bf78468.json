{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawerActions = void 0;\nexports.default = DrawerRouter;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar _extends2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _TabRouter = _interopRequireWildcard(require(\"./TabRouter\"));\n\nvar _excluded = [\"defaultStatus\"];\nvar DrawerActions = (0, _extends2.default)({}, _TabRouter.TabActions, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexports.DrawerActions = DrawerActions;\n\nfunction DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n      defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var router = (0, _TabRouter.default)(rest);\n\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return (0, _extends2.default)({}, state, {\n      history: [].concat((0, _toConsumableArray2.default)(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return (0, _extends2.default)({}, state, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return (0, _extends2.default)({}, router, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return (0, _extends2.default)({}, state, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return (0, _extends2.default)({}, state, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":"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","names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","TabRouter","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}