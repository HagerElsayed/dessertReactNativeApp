{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TabBarTop;\n\nvar _extends3 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _reactNativeTabView = require(\"react-native-tab-view\");\n\nvar _excluded = [\"state\", \"navigation\", \"descriptors\"],\n    _excluded2 = [\"navigationState\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction TabBarTop(_ref) {\n  var _focusedOptions$tabBa, _focusedOptions$tabBa2;\n\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  var activeColor = (_focusedOptions$tabBa = focusedOptions.tabBarActiveTintColor) !== null && _focusedOptions$tabBa !== void 0 ? _focusedOptions$tabBa : colors.text;\n  var inactiveColor = (_focusedOptions$tabBa2 = focusedOptions.tabBarInactiveTintColor) !== null && _focusedOptions$tabBa2 !== void 0 ? _focusedOptions$tabBa2 : (0, _color.default)(activeColor).alpha(0.5).rgb().string();\n  return React.createElement(_reactNativeTabView.TabBar, _extends({}, rest, {\n    navigationState: state,\n    scrollEnabled: focusedOptions.tabBarScrollEnabled,\n    bounces: focusedOptions.tabBarBounces,\n    activeColor: activeColor,\n    inactiveColor: inactiveColor,\n    pressColor: focusedOptions.tabBarPressColor,\n    pressOpacity: focusedOptions.tabBarPressOpacity,\n    tabStyle: focusedOptions.tabBarItemStyle,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, focusedOptions.tabBarIndicatorStyle],\n    indicatorContainerStyle: focusedOptions.tabBarIndicatorContainerStyle,\n    contentContainerStyle: focusedOptions.tabBarContentContainerStyle,\n    style: [{\n      backgroundColor: colors.card\n    }, focusedOptions.tabBarStyle],\n    getAccessibilityLabel: function getAccessibilityLabel(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref3) {\n      var route = _ref3.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref4) {\n      var route = _ref4.route,\n          preventDefault = _ref4.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: function onTabLongPress(_ref5) {\n      var route = _ref5.route;\n      return navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    },\n    renderIcon: function renderIcon(_ref6) {\n      var route = _ref6.route,\n          focused = _ref6.focused,\n          color = _ref6.color;\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarShowIcon === false) {\n        return null;\n      }\n\n      if (options.tabBarIcon !== undefined) {\n        var icon = options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n        return React.createElement(_View.default, {\n          style: [styles.icon, options.tabBarIconStyle]\n        }, icon);\n      }\n\n      return null;\n    },\n    renderLabel: function renderLabel(_ref7) {\n      var route = _ref7.route,\n          focused = _ref7.focused,\n          color = _ref7.color;\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarShowLabel === false) {\n        return null;\n      }\n\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n\n      if (typeof label === 'string') {\n        return React.createElement(_Text.default, {\n          style: [styles.label, {\n            color: color\n          }, options.tabBarLabelStyle],\n          allowFontScaling: options.tabBarAllowFontScaling\n        }, label);\n      }\n\n      return label({\n        focused: focused,\n        color: color\n      });\n    },\n    renderBadge: function renderBadge(_ref8) {\n      var _tabBarBadge;\n\n      var route = _ref8.route;\n      var tabBarBadge = descriptors[route.key].options.tabBarBadge;\n      return (_tabBarBadge = tabBarBadge === null || tabBarBadge === void 0 ? void 0 : tabBarBadge()) !== null && _tabBarBadge !== void 0 ? _tabBarBadge : null;\n    },\n    renderIndicator: function renderIndicator(_ref9) {\n      var state = _ref9.navigationState,\n          rest = (0, _objectWithoutProperties2.default)(_ref9, _excluded2);\n      return focusedOptions.tabBarIndicator ? focusedOptions.tabBarIndicator((0, _extends3.default)({\n        state: state\n      }, rest)) : React.createElement(_reactNativeTabView.TabBarIndicator, _extends({\n        navigationState: state\n      }, rest));\n    }\n  }));\n}\n\nvar styles = _StyleSheet.default.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"mappings":"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","names":["TabBarTop","state","navigation","descriptors","rest","useTheme","colors","focusedOptions","routes","index","key","options","activeColor","tabBarActiveTintColor","text","inactiveColor","tabBarInactiveTintColor","Color","alpha","rgb","string","React","TabBar","navigationState","scrollEnabled","tabBarScrollEnabled","bounces","tabBarBounces","pressColor","tabBarPressColor","pressOpacity","tabBarPressOpacity","tabStyle","tabBarItemStyle","indicatorStyle","backgroundColor","primary","tabBarIndicatorStyle","indicatorContainerStyle","tabBarIndicatorContainerStyle","contentContainerStyle","tabBarContentContainerStyle","style","card","tabBarStyle","getAccessibilityLabel","route","tabBarAccessibilityLabel","getTestID","tabBarTestID","onTabPress","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","onTabLongPress","renderIcon","focused","color","tabBarShowIcon","tabBarIcon","undefined","icon","View","styles","tabBarIconStyle","renderLabel","tabBarShowLabel","label","tabBarLabel","title","name","Text","tabBarLabelStyle","allowFontScaling","tabBarAllowFontScaling","renderBadge","tabBarBadge","renderIndicator","tabBarIndicator","TabBarIndicator","StyleSheet","create","height","width","textAlign","textTransform","fontSize","margin"],"sources":["MaterialTopTabBar.tsx"],"sourcesContent":["import {\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  const activeColor = focusedOptions.tabBarActiveTintColor ?? colors.text;\n  const inactiveColor =\n    focusedOptions.tabBarInactiveTintColor ??\n    Color(activeColor).alpha(0.5).rgb().string();\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      scrollEnabled={focusedOptions.tabBarScrollEnabled}\n      bounces={focusedOptions.tabBarBounces}\n      activeColor={activeColor}\n      inactiveColor={inactiveColor}\n      pressColor={focusedOptions.tabBarPressColor}\n      pressOpacity={focusedOptions.tabBarPressOpacity}\n      tabStyle={focusedOptions.tabBarItemStyle}\n      indicatorStyle={[\n        { backgroundColor: colors.primary },\n        focusedOptions.tabBarIndicatorStyle,\n      ]}\n      indicatorContainerStyle={focusedOptions.tabBarIndicatorContainerStyle}\n      contentContainerStyle={focusedOptions.tabBarContentContainerStyle}\n      style={[{ backgroundColor: colors.card }, focusedOptions.tabBarStyle]}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowIcon === false) {\n          return null;\n        }\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return (\n            <View style={[styles.icon, options.tabBarIconStyle]}>{icon}</View>\n          );\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowLabel === false) {\n          return null;\n        }\n\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, options.tabBarLabelStyle]}\n              allowFontScaling={options.tabBarAllowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n      renderBadge={({ route }) => {\n        const { tabBarBadge } = descriptors[route.key].options;\n\n        return tabBarBadge?.() ?? null;\n      }}\n      renderIndicator={({ navigationState: state, ...rest }) => {\n        return focusedOptions.tabBarIndicator ? (\n          focusedOptions.tabBarIndicator({\n            state: state as TabNavigationState<ParamListBase>,\n            ...rest,\n          })\n        ) : (\n          <TabBarIndicator navigationState={state} {...rest} />\n        );\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}