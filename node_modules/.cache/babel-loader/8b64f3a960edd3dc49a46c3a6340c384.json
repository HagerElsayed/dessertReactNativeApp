{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar _utils = require(\"../../utils\");\n\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"mappings":";;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAGC,uBACrB,kFADqBA,CAAvB;AAIO,IAAMC,mBAAmB,GAAG;EACjCC,MADiC,kBAC1BC,UAD0B,EACmB;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAIC,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMC,KAA7CH;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CAAaV,cAAbU;QACD;MAPE;MAULE,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAIN,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMK,MAA7CP;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CAAaV,cAAbU;QACD;MAhBE;MAmBLI,IAAI,EAAE,gBAAM;QACV;;QACA,IAAIR,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMO,MAA7CT;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CAAaV,cAAbU;QACD;MAzBE;MA4BLM,GAAG,EAAE,eAAM;QACT;;QACA,IAAIV,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMS,GAA7CX;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CAAaV,cAAbU;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B","names":["warningMessage","tagMessage","GestureStateManager","create","handlerTag","begin","Reanimated","setGestureState","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}