{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useBackButton;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _BackHandler = _interopRequireDefault(require(\"react-native-web/dist/exports/BackHandler\"));\n\nfunction useBackButton(ref) {\n  React.useEffect(function () {\n    var subscription = _BackHandler.default.addEventListener('hardwareBackPress', function () {\n      var navigation = ref.current;\n\n      if (navigation == null) {\n        return false;\n      }\n\n      if (navigation.canGoBack()) {\n        navigation.goBack();\n        return true;\n      }\n\n      return false;\n    });\n\n    return function () {\n      return subscription.remove();\n    };\n  }, [ref]);\n}","map":{"version":3,"mappings":";;;;;;;;;AAIA;;;;AAGe,SAASA,aAAT,CACbC,GADa,EAEb;EACAC,KAAK,CAACC,SAAND,CAAgB,YAAM;IACpB,IAAME,YAAY,GAAGC,qBAAYC,gBAAZD,CACnB,mBADmBA,EAEnB,YAAM;MACJ,IAAME,UAAU,GAAGN,GAAG,CAACO,OAAvB;;MAEA,IAAID,UAAU,IAAI,IAAlB,EAAwB;QACtB,OAAO,KAAP;MACD;;MAED,IAAIA,UAAU,CAACE,SAAXF,EAAJ,EAA4B;QAC1BA,UAAU,CAACG,MAAXH;QAEA,OAAO,IAAP;MACD;;MAED,OAAO,KAAP;IAfiB,EAArB;;IAmBA,OAAO;MAAA,OAAMH,YAAY,CAACO,MAAbP,EAAN;IAAA,CAAP;EApBF,GAqBG,CAACH,GAAD,CArBHC;AAsBD","names":["useBackButton","ref","React","useEffect","subscription","BackHandler","addEventListener","navigation","current","canGoBack","goBack","remove"],"sources":["useBackButton.tsx"],"sourcesContent":["import type {\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { BackHandler } from 'react-native';\n\nexport default function useBackButton(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>\n) {\n  React.useEffect(() => {\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      () => {\n        const navigation = ref.current;\n\n        if (navigation == null) {\n          return false;\n        }\n\n        if (navigation.canGoBack()) {\n          navigation.goBack();\n\n          return true;\n        }\n\n        return false;\n      }\n    );\n\n    return () => subscription.remove();\n  }, [ref]);\n}\n"]},"metadata":{},"sourceType":"script"}