{"ast":null,"code":"var _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nvar _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useOnGetState;\n\nvar _extends2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nfunction useOnGetState(_ref) {\n  var getState = _ref.getState,\n      getStateListeners = _ref.getStateListeners;\n\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n      addKeyedListener = _React$useContext.addKeyedListener;\n\n  var route = React.useContext(_NavigationRouteContext.default);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var _getStateListeners$ro;\n\n      var childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return (0, _extends2.default)({}, route, {\n        state: childState\n      });\n    });\n\n    if ((0, _isArrayEqual.default)(state.routes, routes)) {\n      return state;\n    }\n\n    return (0, _extends2.default)({}, state, {\n      routes: routes\n    });\n  }, [getState, getStateListeners]);\n  React.useEffect(function () {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AACA;;AAEA;;AACA;;AAGA;;AAOe,SAASA,aAAT,OAGH;EAAA,IAFVC,QAEU,QAFVA,QAEU;EAAA,IADVC,iBACU,QADVA,iBACU;;EACV,wBAA6BC,KAAK,CAACC,UAAND,CAAiBE,iCAAjBF,CAA7B;EAAA,IAAQG,gBAAR,qBAAQA,gBAAR;;EACA,IAAMC,KAAK,GAAGJ,KAAK,CAACC,UAAND,CAAiBK,+BAAjBL,CAAd;EACA,IAAMM,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAACE,GAAT,GAAe,MAAhC;EAEA,IAAMC,kBAAkB,GAAGP,KAAK,CAACQ,WAANR,CAAkB,YAAM;IACjD,IAAMS,KAAK,GAAGX,QAAQ,EAAtB;IAGA,IAAMY,MAAM,GAAGD,KAAK,CAACC,MAAND,CAAaE,GAAbF,CAAkBL,eAAD,EAAW;MAAA;;MACzC,IAAMQ,UAAU,4BAAGb,iBAAiB,CAACK,KAAK,CAACE,GAAP,CAApB,0DAAGO,6CAAnB;;MAEA,IAAIT,KAAK,CAACK,KAANL,KAAgBQ,UAApB,EAAgC;QAC9B,OAAOR,KAAP;MACD;;MAED,kCAAYA,KAAZ;QAAmBK,KAAK,EAAEG;MAA1B;IAPa,EAAf;;IAUA,IAAIE,2BAAaL,KAAK,CAACC,MAAnBI,EAA2BJ,MAA3BI,CAAJ,EAAwC;MACtC,OAAOL,KAAP;IACD;;IAED,kCAAYA,KAAZ;MAAmBC;IAAnB;EAlByB,GAmBxB,CAACZ,QAAD,EAAWC,iBAAX,CAnBwBC,CAA3B;EAqBAA,KAAK,CAACe,SAANf,CAAgB,YAAM;IACpB,OAAOG,gBAAP,SAAOA,oBAAP,WAAOA,GAAP,MAAOA,mBAAgB,CAAG,UAAH,EAAeG,GAAf,EAAoBC,kBAApB,CAAvB;EADF,GAEG,CAACJ,gBAAD,EAAmBI,kBAAnB,EAAuCD,GAAvC,CAFHN;AAGD","names":["useOnGetState","getState","getStateListeners","React","useContext","NavigationBuilderContext","addKeyedListener","route","NavigationRouteContext","key","getRehydratedState","useCallback","state","routes","map","childState","_getStateListeners$ro","isArrayEqual","useEffect"],"sources":["useOnGetState.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"script"}