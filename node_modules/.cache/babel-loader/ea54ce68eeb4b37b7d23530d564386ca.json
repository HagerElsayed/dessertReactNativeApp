{"ast":null,"code":"var _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nvar _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureDetector = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createClass.js\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/inherits.js\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\"));\n\nvar _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _gesture2 = require(\"./gesture\");\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _handlersRegistry = require(\"../handlersRegistry\");\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../../RNGestureHandlerModule\"));\n\nvar _gestureHandlerCommon = require(\"../gestureHandlerCommon\");\n\nvar _gestureStateManager = require(\"./gestureStateManager\");\n\nvar _FlingGestureHandler = require(\"../FlingGestureHandler\");\n\nvar _ForceTouchGestureHandler = require(\"../ForceTouchGestureHandler\");\n\nvar _LongPressGestureHandler = require(\"../LongPressGestureHandler\");\n\nvar _PanGestureHandler = require(\"../PanGestureHandler\");\n\nvar _TapGestureHandler = require(\"../TapGestureHandler\");\n\nvar _State = require(\"../../State\");\n\nvar _TouchEventType = require(\"../../TouchEventType\");\n\nvar _ActionType = require(\"../../ActionType\");\n\nvar _utils = require(\"../../utils\");\n\nvar _getShadowNodeFromRef = require(\"../../getShadowNodeFromRef\");\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _eventReceiver = require(\"./eventReceiver\");\n\nvar _Reanimated$default$c, _Reanimated$default;\n\nvar ALLOWED_PROPS = [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerWithMonitorProps), (0, _toConsumableArray2.default)(_TapGestureHandler.tapGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerCustomNativeProps), (0, _toConsumableArray2.default)(_LongPressGestureHandler.longPressGestureHandlerProps), (0, _toConsumableArray2.default)(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), (0, _toConsumableArray2.default)(_FlingGestureHandler.flingGestureHandlerProps));\n\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof _gesture2.BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\n\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n\n    _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);\n\n    (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);\n  }\n\n  (0, _gestureHandlerCommon.scheduleFlushOperations)();\n}\n\nfunction checkGestureCallbacksForWorklets(gesture) {\n  if (gesture.config.runOnJS) {\n    return;\n  }\n\n  var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n  var areSomeWorklets = gesture.handlers.isWorklet.includes(true);\n\n  if (areSomeNotWorklets && areSomeWorklets) {\n    console.error((0, _utils.tagMessage)(\"Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.\"));\n  }\n}\n\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n      gestureConfig = _ref.gestureConfig,\n      gesture = _ref.gesture,\n      viewTag = _ref.viewTag,\n      webEventHandlersRef = _ref.webEventHandlersRef;\n\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n\n  for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n    checkGestureCallbacksForWorklets(handler);\n\n    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));\n\n    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  setImmediate(function () {\n    for (var _iterator3 = (0, _createForOfIteratorHelperLoose2.default)(gesture), _step3; !(_step3 = _iterator3()).done;) {\n      var _handler = _step3.value;\n      var requireToFail = [];\n\n      if (_handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      }\n\n      var simultaneousWith = [];\n\n      if (_handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      }\n\n      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    }\n\n    (0, _gestureHandlerCommon.scheduleFlushOperations)();\n  });\n  preparedGesture.config = gesture;\n\n  for (var _iterator4 = (0, _createForOfIteratorHelperLoose2.default)(preparedGesture.config), _step4; !(_step4 = _iterator4()).done;) {\n    var _gesture = _step4.value;\n    var actionType = _gesture.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;\n\n    if (_Platform.default.OS === 'web') {\n      _RNGestureHandlerModule.default.attachGestureHandler(_gesture.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      _RNGestureHandlerModule.default.attachGestureHandler(_gesture.handlerTag, viewTag, actionType);\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n\n    preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}\n\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    checkGestureCallbacksForWorklets(handler);\n\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler2 = preparedGesture.config[_i];\n      _handler2.config = gesture[_i].config;\n      _handler2.handlers = gesture[_i].handlers;\n      var requireToFail = extractValidHandlerTags(_handler2.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler2.config.simultaneousWith);\n\n      _RNGestureHandlerModule.default.updateGestureHandler(_handler2.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler2.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n\n      (0, _handlersRegistry.registerHandler)(_handler2.handlerTag, _handler2, _handler2.config.testId);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      var _preparedGesture$anim;\n\n      var previousHandlersValue = (_preparedGesture$anim = preparedGesture.animatedHandlers.value) !== null && _preparedGesture$anim !== void 0 ? _preparedGesture$anim : [];\n      var newHandlersValue = preparedGesture.config.filter(function (g) {\n        return g.shouldUseReanimated;\n      }).map(function (g) {\n        return g.handlers;\n      });\n      var shouldUpdateSharedValue = previousHandlersValue.length !== newHandlersValue.length;\n\n      if (!shouldUpdateSharedValue) {\n        for (var _i2 = 0; _i2 < newHandlersValue.length; _i2++) {\n          if (newHandlersValue[_i2].gestureId !== previousHandlersValue[_i2].gestureId) {\n            shouldUpdateSharedValue = true;\n            break;\n          }\n        }\n      }\n\n      if (shouldUpdateSharedValue) {\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n    }\n\n    (0, _gestureHandlerCommon.scheduleFlushOperations)();\n  });\n}\n\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isStateChangeEvent(event) {\n  'worklet';\n\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(event) {\n  'worklet';\n\n  return event.eventType != null;\n}\n\nfunction getHandler(type, gesture) {\n  'worklet';\n\n  switch (type) {\n    case _gesture2.CALLBACK_TYPE.BEGAN:\n      return gesture.onBegin;\n\n    case _gesture2.CALLBACK_TYPE.START:\n      return gesture.onStart;\n\n    case _gesture2.CALLBACK_TYPE.UPDATE:\n      return gesture.onUpdate;\n\n    case _gesture2.CALLBACK_TYPE.CHANGE:\n      return gesture.onChange;\n\n    case _gesture2.CALLBACK_TYPE.END:\n      return gesture.onEnd;\n\n    case _gesture2.CALLBACK_TYPE.FINALIZE:\n      return gesture.onFinalize;\n\n    case _gesture2.CALLBACK_TYPE.TOUCHES_DOWN:\n      return gesture.onTouchesDown;\n\n    case _gesture2.CALLBACK_TYPE.TOUCHES_MOVE:\n      return gesture.onTouchesMove;\n\n    case _gesture2.CALLBACK_TYPE.TOUCHES_UP:\n      return gesture.onTouchesUp;\n\n    case _gesture2.CALLBACK_TYPE.TOUCHES_CANCELLED:\n      return gesture.onTouchesCancelled;\n  }\n}\n\nfunction touchEventTypeToCallbackType(eventType) {\n  'worklet';\n\n  switch (eventType) {\n    case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n      return _gesture2.CALLBACK_TYPE.TOUCHES_DOWN;\n\n    case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n      return _gesture2.CALLBACK_TYPE.TOUCHES_MOVE;\n\n    case _TouchEventType.TouchEventType.TOUCHES_UP:\n      return _gesture2.CALLBACK_TYPE.TOUCHES_UP;\n\n    case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n      return _gesture2.CALLBACK_TYPE.TOUCHES_CANCELLED;\n  }\n\n  return _gesture2.CALLBACK_TYPE.UNDEFINED;\n}\n\nfunction runWorklet(type, gesture, event) {\n  'worklet';\n\n  var handler = getHandler(type, gesture);\n\n  if (gesture.isWorklet[type]) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n\n    handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n  } else if (handler) {\n    console.warn((0, _utils.tagMessage)('Animated gesture callback must be a worklet'));\n  }\n}\n\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n  if (!_reanimatedWrapper.Reanimated) {\n    return;\n  }\n\n  var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);\n\n  var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);\n\n  var stateControllers = [];\n\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n\n    if (!currentCallback) {\n      return;\n    }\n\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n            runWorklet(_gesture2.CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n            runWorklet(_gesture2.CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === _State.State.END) {\n            if (event.oldState === _State.State.ACTIVE) {\n              runWorklet(_gesture2.CALLBACK_TYPE.END, gesture, event, true);\n            }\n\n            runWorklet(_gesture2.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === _State.State.ACTIVE) {\n              runWorklet(_gesture2.CALLBACK_TYPE.END, gesture, event, false);\n            }\n\n            runWorklet(_gesture2.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(_gesture2.CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n\n            runWorklet(_gesture2.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\nvar GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useReanimatedHook = gesture.some(function (g) {\n    return g.shouldUseReanimated;\n  });\n  var viewRef = (0, _react.useRef)(null);\n  var firstRenderRef = (0, _react.useRef)(true);\n  var webEventHandlersRef = (0, _react.useRef)({\n    onGestureHandlerEvent: function onGestureHandlerEvent(e) {\n      (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);\n    }\n  });\n\n  var preparedGesture = _react.default.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useReanimatedHook: useReanimatedHook\n  }).current;\n\n  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n    throw new Error((0, _utils.tagMessage)('You cannot change the thread the callbacks are ran on while the app is running'));\n  }\n\n  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n\n  if (useReanimatedHook) {\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  (0, _react.useEffect)(function () {\n    firstRenderRef.current = true;\n    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      webEventHandlersRef: webEventHandlersRef\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  (0, _react.useEffect)(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          webEventHandlersRef: webEventHandlersRef\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  var refFunction = function refFunction(ref) {\n    if (ref !== null) {\n      viewRef.current = ref;\n\n      if ((0, _utils.isFabric)()) {\n        var node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n\n        if (global.isFormsStackingContext(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }\n  };\n\n  if (useReanimatedHook) {\n    return _react.default.createElement(AnimatedWrap, {\n      ref: refFunction,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return _react.default.createElement(Wrap, {\n      ref: refFunction\n    }, props.children);\n  }\n};\n\nexports.GestureDetector = GestureDetector;\n\nvar Wrap = function (_React$Component) {\n  (0, _inherits2.default)(Wrap, _React$Component);\n\n  var _super = (0, _createSuper2.default)(Wrap);\n\n  function Wrap() {\n    (0, _classCallCheck2.default)(this, Wrap);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = _react.default.Children.only(this.props.children);\n\n      return _react.default.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n  return Wrap;\n}(_react.default.Component);\n\nvar AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"mappings":"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","names":["ALLOWED_PROPS","baseGestureHandlerWithMonitorProps","tapGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","longPressGestureHandlerProps","forceTouchGestureHandlerProps","flingGestureHandlerProps","convertToHandlerTag","ref","BaseGesture","handlerTag","current","_ref$current","extractValidHandlerTags","interactionGroup","map","_interactionGroup$map2","filter","tag","dropHandlers","preparedGesture","config","handler","RNGestureHandlerModule","dropGestureHandler","unregisterHandler","testId","scheduleFlushOperations","checkGestureCallbacksForWorklets","gesture","runOnJS","areSomeNotWorklets","handlers","isWorklet","includes","areSomeWorklets","console","error","tagMessage","attachHandlers","gestureConfig","viewTag","webEventHandlersRef","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","filterConfig","registerHandler","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","actionType","shouldUseReanimated","ActionType","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","Platform","OS","attachGestureHandler","JS_FUNCTION_OLD_API","animatedHandlers","isAnimatedGesture","g","value","updateHandlers","i","length","previousHandlersValue","newHandlersValue","shouldUpdateSharedValue","gestureId","needsToReattach","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","CALLBACK_TYPE","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","TouchEventType","UNDEFINED","runWorklet","args","warn","useAnimatedGesture","needsRebuild","Reanimated","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","State","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","GestureStateManager","create","changeEventCalculator","_gesture$changeEventC","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","_gestureConfig$toGest2","useReanimatedHook","some","viewRef","useRef","firstRenderRef","onGestureHandlerEvent","e","nativeEvent","React","Error","needsToRebuildReanimatedEvent","useEffect","findNodeHandle","refFunction","isFabric","node","getShadowNodeFromRef","global","isFormsStackingContext","AnimatedWrap","children","Wrap","render","child","Children","only","cloneElement","collapsable","Component","default","_Reanimated$default","createAnimatedComponent"],"sources":["GestureDetector.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n  HandlerStateChangeEvent,\n  scheduleFlushOperations,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport { ComposedGesture } from './gestureComposition';\nimport { ActionType } from '../../ActionType';\nimport { isFabric, tagMessage } from '../../utils';\nimport { getShadowNodeFromRef } from '../../getShadowNodeFromRef';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../RNGestureHandlerModule.web';\nimport { onGestureHandlerEvent } from './eventReceiver';\n\ndeclare const global: {\n  isFormsStackingContext: (node: unknown) => boolean | null; // JSI function\n};\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useReanimatedHook: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag, handler.config.testId);\n  }\n\n  scheduleFlushOperations();\n}\n\nfunction checkGestureCallbacksForWorklets(gesture: GestureType) {\n  // if a gesture is explicitly marked to run on the JS thread there is no need to check\n  // if callbacks are worklets as the user is aware they will be ran on the JS thread\n  if (gesture.config.runOnJS) {\n    return;\n  }\n\n  const areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n  const areSomeWorklets = gesture.handlers.isWorklet.includes(true);\n\n  // if some of the callbacks are worklets and some are not, and the gesture is not\n  // explicitly marked with `.runOnJS(true)` show an error\n  if (areSomeNotWorklets && areSomeWorklets) {\n    console.error(\n      tagMessage(\n        `Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`\n      )\n    );\n  }\n}\n\ninterface WebEventHandler {\n  onGestureHandlerEvent: (event: HandlerStateChangeEvent<unknown>) => void;\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    checkGestureCallbacksForWorklets(handler);\n\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    for (const handler of gesture) {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = (gesture\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown) as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n    checkGestureCallbacksForWorklets(handler);\n\n    // only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler, handler.config.testId);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      const previousHandlersValue =\n        preparedGesture.animatedHandlers.value ?? [];\n      const newHandlersValue = (preparedGesture.config\n        .filter((g) => g.shouldUseReanimated) // ignore gestures that shouldn't run on UI\n        .map((g) => g.handlers) as unknown) as HandlerCallbacks<\n        Record<string, unknown>\n      >[];\n\n      // if amount of gesture configs changes, we need to update the callbacks in shared value\n      let shouldUpdateSharedValue =\n        previousHandlersValue.length !== newHandlersValue.length;\n\n      if (!shouldUpdateSharedValue) {\n        // if the amount is the same, we need to check if any of the configs inside has changed\n        for (let i = 0; i < newHandlersValue.length; i++) {\n          if (\n            // we can use the `gestureId` prop as it's unique for every config instance\n            newHandlersValue[i].gestureId !== previousHandlersValue[i].gestureId\n          ) {\n            shouldUpdateSharedValue = true;\n            break;\n          }\n        }\n      }\n\n      if (shouldUpdateSharedValue) {\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n    }\n\n    scheduleFlushOperations();\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (\n      gesture[i].handlerName !== preparedGesture.config[i].handlerName ||\n      gesture[i].shouldUseReanimated !==\n        preparedGesture.config[i].shouldUseReanimated\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  'worklet';\n  // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  'worklet';\n  return event.eventType != null;\n}\n\nfunction getHandler(\n  type: CALLBACK_TYPE,\n  gesture: HandlerCallbacks<Record<string, unknown>>\n) {\n  'worklet';\n  switch (type) {\n    case CALLBACK_TYPE.BEGAN:\n      return gesture.onBegin;\n    case CALLBACK_TYPE.START:\n      return gesture.onStart;\n    case CALLBACK_TYPE.UPDATE:\n      return gesture.onUpdate;\n    case CALLBACK_TYPE.CHANGE:\n      return gesture.onChange;\n    case CALLBACK_TYPE.END:\n      return gesture.onEnd;\n    case CALLBACK_TYPE.FINALIZE:\n      return gesture.onFinalize;\n    case CALLBACK_TYPE.TOUCHES_DOWN:\n      return gesture.onTouchesDown;\n    case CALLBACK_TYPE.TOUCHES_MOVE:\n      return gesture.onTouchesMove;\n    case CALLBACK_TYPE.TOUCHES_UP:\n      return gesture.onTouchesUp;\n    case CALLBACK_TYPE.TOUCHES_CANCELLED:\n      return gesture.onTouchesCancelled;\n  }\n}\n\nfunction touchEventTypeToCallbackType(\n  eventType: TouchEventType\n): CALLBACK_TYPE {\n  'worklet';\n  switch (eventType) {\n    case TouchEventType.TOUCHES_DOWN:\n      return CALLBACK_TYPE.TOUCHES_DOWN;\n    case TouchEventType.TOUCHES_MOVE:\n      return CALLBACK_TYPE.TOUCHES_MOVE;\n    case TouchEventType.TOUCHES_UP:\n      return CALLBACK_TYPE.TOUCHES_UP;\n    case TouchEventType.TOUCHES_CANCELLED:\n      return CALLBACK_TYPE.TOUCHES_CANCELLED;\n  }\n  return CALLBACK_TYPE.UNDEFINED;\n}\n\nfunction runWorklet(\n  type: CALLBACK_TYPE,\n  gesture: HandlerCallbacks<Record<string, unknown>>,\n  event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n  ...args: any[]\n) {\n  'worklet';\n  const handler = getHandler(type, gesture);\n  if (gesture.isWorklet[type]) {\n    // @ts-ignore Logic below makes sure the correct event is send to the\n    // correct handler.\n    handler?.(event, ...args);\n  } else if (handler) {\n    console.warn(tagMessage('Animated gesture callback must be a worklet'));\n  }\n}\n\nfunction useAnimatedGesture(\n  preparedGesture: GestureConfigReference,\n  needsRebuild: boolean\n) {\n  if (!Reanimated) {\n    return;\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== TouchEventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    needsRebuild\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n  children?: React.ReactNode;\n}\nexport const GestureDetector = (props: GestureDetectorProps) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useReanimatedHook = gesture.some((g) => g.shouldUseReanimated);\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n  const webEventHandlersRef = useRef<WebEventHandler>({\n    onGestureHandlerEvent: (e: HandlerStateChangeEvent<unknown>) => {\n      onGestureHandlerEvent(e.nativeEvent);\n    },\n  });\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useReanimatedHook: useReanimatedHook,\n  }).current;\n\n  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n    throw new Error(\n      tagMessage(\n        'You cannot change the thread the callbacks are ran on while the app is running'\n      )\n    );\n  }\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useReanimatedHook) {\n    // Whether animatedGesture or gesture is used shouldn't change while the app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      webEventHandlersRef,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          webEventHandlersRef,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  const refFunction = (ref: unknown) => {\n    if (ref !== null) {\n      //@ts-ignore Just setting the ref\n      viewRef.current = ref;\n\n      if (isFabric()) {\n        const node = getShadowNodeFromRef(ref);\n        if (global.isFormsStackingContext(node) === false) {\n          console.error(\n            tagMessage(\n              'GestureDetector has received a child that may get view-flattened. ' +\n                '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'\n            )\n          );\n        }\n      }\n    }\n  };\n\n  if (useReanimatedHook) {\n    return (\n      <AnimatedWrap\n        ref={refFunction}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={refFunction}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{\n  onGestureHandlerEvent?: unknown;\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?: React.ReactNode;\n}> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"script"}