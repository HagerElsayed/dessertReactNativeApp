{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = MaterialTopTabView;\n\nvar _extends3 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeTabView = require(\"react-native-tab-view\");\n\nvar _MaterialTopTabBar = _interopRequireDefault(require(\"./MaterialTopTabBar\"));\n\nvar _excluded = [\"tabBar\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction MaterialTopTabView(_ref) {\n  var _ref$tabBar = _ref.tabBar,\n      tabBar = _ref$tabBar === void 0 ? function (props) {\n    return React.createElement(_MaterialTopTabBar.default, props);\n  } : _ref$tabBar,\n      state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar((0, _extends3.default)({}, props, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  return React.createElement(_reactNativeTabView.TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch((0, _extends3.default)({}, _native.CommonActions.navigate({\n        name: state.routes[index].name,\n        merge: true\n      }), {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderLazyPlaceholder: function renderLazyPlaceholder(_ref3) {\n      var _descriptors$route$ke, _descriptors$route$ke2, _descriptors$route$ke3;\n\n      var route = _ref3.route;\n      return (_descriptors$route$ke = (_descriptors$route$ke2 = (_descriptors$route$ke3 = descriptors[route.key].options).lazyPlaceholder) === null || _descriptors$route$ke2 === void 0 ? void 0 : _descriptors$route$ke2.call(_descriptors$route$ke3)) !== null && _descriptors$route$ke !== void 0 ? _descriptors$route$ke : null;\n    },\n    lazy: function lazy(_ref4) {\n      var route = _ref4.route;\n      return descriptors[route.key].options.lazy === true;\n    },\n    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,\n    swipeEnabled: focusedOptions.swipeEnabled,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AAQA;;;;;;;;;;;;;;;;;;;;;;AAQe,SAASA,kBAAT,OAOL;EAAA,uBANRC,MAMQ;EAAA,IANRA,MAMQ,4BANEC,eAAD;IAAA,OAAmCC,oBAACC,0BAAD,EAAuBF,KAAvB,CAAnC;EAAA,CAMD;EAAA,IALRG,KAKQ,QALRA,KAKQ;EAAA,IAJRC,UAIQ,QAJRA,UAIQ;EAAA,IAHRC,WAGQ,QAHRA,WAGQ;EAAA,IAFRC,mBAEQ,QAFRA,mBAEQ;EAAA,IADLC,IACK;;EACR,gBAAmBC,uBAAnB;EAAA,IAAQC,MAAR,aAAQA,MAAR;;EAEA,IAAMC,YAAY,GAAIV,SAAhBU,YAAgBV,MAAD,EAA+B;IAClD,OAAOD,MAAM,4BACRC,KADQ;MAEXG,KAAK,EAAEA,KAFI;MAGXC,UAAU,EAAEA,UAHD;MAIXC,WAAW,EAAEA;IAJF,GAAb;EADF;;EASA,IAAMM,cAAc,GAAGN,WAAW,CAACF,KAAK,CAACS,MAANT,CAAaA,KAAK,CAACU,KAAnBV,EAA0BW,GAA3B,CAAXT,CAA2CU,OAAlE;EAEA,OACEd,oBAACe,2BAAD,eACMT,IADN;IAEEU,aAAa,EAAGJ,4BAAD;MAAA,OACbT,UAAU,CAACc,QAAXd,4BACKe,sBAAcC,QAAdD,CAAuB;QACxBE,IAAI,EAAElB,KAAK,CAACS,MAANT,CAAaU,KAAbV,EAAoBkB,IADF;QAExBC,KAAK,EAAE;MAFiB,CAAvBH,CADLf;QAKEmB,MAAM,EAAEpB,KAAK,CAACW;MALhBV,GADa;IAAA,CAFjB;IAWEoB,WAAW,EAAE;MAAA,IAAGC,KAAH,SAAGA,KAAH;MAAA,OAAepB,WAAW,CAACoB,KAAK,CAACX,GAAP,CAAXT,CAAuBqB,MAAvBrB,EAAf;IAXf;IAYEsB,eAAe,EAAExB,KAZnB;IAaEO,YAAY,EAAEA,YAbhB;IAcEkB,qBAAqB,EAAE;MAAA;;MAAA,IAAGH,KAAH,SAAGA,KAAH;MAAA,0DACrB,qCAAW,CAACA,KAAK,CAACX,GAAP,CAAXT,CAAuBU,OAAvB,EAA+Bc,eADV,2DACrBC,mDADqB,yEACiC,IADjC;IAdzB;IAiBEC,IAAI,EAAE;MAAA,IAAGN,KAAH,SAAGA,KAAH;MAAA,OAAepB,WAAW,CAACoB,KAAK,CAACX,GAAP,CAAXT,CAAuBU,OAAvBV,CAA+B0B,IAA/B1B,KAAwC,IAAvD;IAjBR;IAkBE2B,mBAAmB,EAAErB,cAAc,CAACqB,mBAlBtC;IAmBEC,YAAY,EAAEtB,cAAc,CAACsB,YAnB/B;IAoBEC,YAAY,EAAE;MAAA,OAAM9B,UAAU,CAAC+B,IAAX/B,CAAgB;QAAEgC,IAAI,EAAE;MAAR,CAAhBhC,CAAN;IAAA,CApBhB;IAqBEiC,UAAU,EAAE;MAAA,OAAMjC,UAAU,CAAC+B,IAAX/B,CAAgB;QAAEgC,IAAI,EAAE;MAAR,CAAhBhC,CAAN;IAAA,CArBd;IAsBEE,mBAAmB,EAAE,CACnB;MAAEgC,eAAe,EAAE7B,MAAM,CAAC8B;IAA1B,CADmB,EAEnBjC,mBAFmB;EAtBvB,GADF;AA6BD","names":["MaterialTopTabView","tabBar","props","React","MaterialTopTabBar","state","navigation","descriptors","sceneContainerStyle","rest","useTheme","colors","renderTabBar","focusedOptions","routes","index","key","options","TabView","onIndexChange","dispatch","CommonActions","navigate","name","merge","target","renderScene","route","render","navigationState","renderLazyPlaceholder","lazyPlaceholder","_descriptors$route$ke2","lazy","lazyPreloadDistance","swipeEnabled","onSwipeStart","emit","type","onSwipeEnd","backgroundColor","background"],"sources":["MaterialTopTabView.tsx"],"sourcesContent":["import {\n  CommonActions,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { SceneRendererProps, TabView } from 'react-native-tab-view';\n\nimport type {\n  MaterialTopTabBarProps,\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n} from '../types';\nimport MaterialTopTabBar from './MaterialTopTabBar';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n\nexport default function MaterialTopTabView({\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  return (\n    <TabView<Route<string>>\n      {...rest}\n      onIndexChange={(index) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderLazyPlaceholder={({ route }) =>\n        descriptors[route.key].options.lazyPlaceholder?.() ?? null\n      }\n      lazy={({ route }) => descriptors[route.key].options.lazy === true}\n      lazyPreloadDistance={focusedOptions.lazyPreloadDistance}\n      swipeEnabled={focusedOptions.swipeEnabled}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"script"}