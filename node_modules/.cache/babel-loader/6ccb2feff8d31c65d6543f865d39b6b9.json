{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createClass.js\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/inherits.js\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\"));\n\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\n\nvar _PixelRatio = _interopRequireDefault(require(\"react-native-web/dist/exports/PixelRatio\"));\n\nvar DraggingGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(DraggingGestureHandler, _GestureHandler);\n\n  var _super = (0, _createSuper2.default)(DraggingGestureHandler);\n\n  function DraggingGestureHandler() {\n    (0, _classCallCheck2.default)(this, DraggingGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(DraggingGestureHandler, [{\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY,\n          velocityX = _ref.velocityX,\n          velocityY = _ref.velocityY,\n          _ref$center = _ref.center,\n          x = _ref$center.x,\n          y = _ref$center.y;\n      var rect = this.view.getBoundingClientRect();\n\n      var ratio = _PixelRatio.default.get();\n\n      return {\n        translationX: deltaX - (this.__initialX || 0),\n        translationY: deltaY - (this.__initialY || 0),\n        absoluteX: x,\n        absoluteY: y,\n        velocityX: velocityX * ratio,\n        velocityY: velocityY * ratio,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }]);\n  return DraggingGestureHandler;\n}(_GestureHandler2.default);\n\nvar _default = DraggingGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAEA;;;;IAGeA,sB;;;;;;;;;;;;SACiB,eAAG;MAC/B,OAAO,IAAP;IACD;;;WAEDC,oCAMmB;MAAA,IALjBC,MAKiB,QALjBA,MAKiB;MAAA,IAJjBC,MAIiB,QAJjBA,MAIiB;MAAA,IAHjBC,SAGiB,QAHjBA,SAGiB;MAAA,IAFjBC,SAEiB,QAFjBA,SAEiB;MAAA,uBADjBC,MACiB;MAAA,IADPC,CACO,eADPA,CACO;MAAA,IADJC,CACI,eADJA,CACI;MAEjB,IAAMC,IAAI,GAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb;;MACA,IAAMC,KAAK,GAAGC,oBAAWC,GAAXD,EAAd;;MACA,OAAO;QACLE,YAAY,EAAEb,MAAM,IAAI,KAAKc,UAAL,IAAmB,CAAvB,CADf;QAELC,YAAY,EAAEd,MAAM,IAAI,KAAKe,UAAL,IAAmB,CAAvB,CAFf;QAGLC,SAAS,EAAEZ,CAHN;QAILa,SAAS,EAAEZ,CAJN;QAKLJ,SAAS,EAAEA,SAAS,GAAGQ,KALlB;QAMLP,SAAS,EAAEA,SAAS,GAAGO,KANlB;QAOLL,CAAC,EAAEA,CAAC,GAAGE,IAAI,CAACY,IAPP;QAQLb,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACa;MARP,CAAP;IAUD;;;EAzB2CC,wB;;eA4B/BvB,sB","names":["DraggingGestureHandler","transformNativeEvent","deltaX","deltaY","velocityX","velocityY","center","x","y","rect","view","getBoundingClientRect","ratio","PixelRatio","get","translationX","__initialX","translationY","__initialY","absoluteX","absoluteY","left","top","GestureHandler"],"sources":["DraggingGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler, { HammerInputExt } from './GestureHandler';\nimport { PixelRatio } from 'react-native';\n\nabstract class DraggingGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  transformNativeEvent({\n    deltaX,\n    deltaY,\n    velocityX,\n    velocityY,\n    center: { x, y },\n  }: HammerInputExt) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const ratio = PixelRatio.get();\n    return {\n      translationX: deltaX - (this.__initialX || 0),\n      translationY: deltaY - (this.__initialY || 0),\n      absoluteX: x,\n      absoluteY: y,\n      velocityX: velocityX * ratio,\n      velocityY: velocityY * ratio,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n}\n\nexport default DraggingGestureHandler;\n"]},"metadata":{},"sourceType":"script"}