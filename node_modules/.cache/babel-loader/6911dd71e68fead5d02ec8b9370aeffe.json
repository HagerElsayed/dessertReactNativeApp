{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RotationGesture = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createClass.js\"));\n\nvar _get2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/get.js\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/inherits.js\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\"));\n\nvar _extends2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _gesture = require(\"./gesture\");\n\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation\n    };\n  }\n\n  return (0, _extends2.default)({}, current, changePayload);\n}\n\nvar RotationGesture = function (_ContinousBaseGesture) {\n  (0, _inherits2.default)(RotationGesture, _ContinousBaseGesture);\n\n  var _super = (0, _createSuper2.default)(RotationGesture);\n\n  function RotationGesture() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RotationGesture);\n    _this = _super.call(this);\n    _this.handlerName = 'RotationGestureHandler';\n    return _this;\n  }\n\n  (0, _createClass2.default)(RotationGesture, [{\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(RotationGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n  return RotationGesture;\n}(_gesture.ContinousBaseGesture);\n\nexports.RotationGesture = RotationGesture;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA,SAASA,qBAAT,CACEC,OADF,EAEEC,QAFF,EAGE;EACA;;EACA,IAAIC,aAAJ;;EACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BD,aAAa,GAAG;MACdE,cAAc,EAAEJ,OAAO,CAACK;IADV,CAAhBH;EADF,OAIO;IACLA,aAAa,GAAG;MACdE,cAAc,EAAEJ,OAAO,CAACK,QAARL,GAAmBC,QAAQ,CAACI;IAD9B,CAAhBH;EAGD;;EAED,kCAAYF,OAAZ,EAAwBE,aAAxB;AACD;;IAEYI,e;;;;;EAIXC,2BAAc;IAAA;;IAAA;IACZ;IAEA,MAAKC,WAAL,GAAmB,wBAAnB;IAHY;EAIb;;;;WAEDC,kBACEC,QADFD,EAME;MAEA,KAAKE,QAAL,CAAcZ,qBAAd,GAAsCA,qBAAtC;MACA,iHAAsBW,QAAtB;IACD;;;EApBkCE,6B","names":["changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","RotationGesture","constructor","handlerName","onChange","callback","handlers","ContinousBaseGesture"],"sources":["rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"]},"metadata":{},"sourceType":"script"}