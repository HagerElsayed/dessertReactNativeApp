{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Link;\n\nvar _extends2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _useLinkProps = _interopRequireDefault(require(\"./useLinkProps\"));\n\nvar _excluded = [\"to\", \"action\"];\n\nfunction Link(_ref) {\n  var to = _ref.to,\n      action = _ref.action,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var props = (0, _useLinkProps.default)({\n    to: to,\n    action: action\n  });\n\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(_Text.default, (0, _extends2.default)({}, props, rest, _Platform.default.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  })));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;;;;;AAGA;;;;AAoBe,SAASA,IAAT,OAIM;EAAA,IAHnBC,EAGmB,QAHnBA,EAGmB;EAAA,IAFnBC,MAEmB,QAFnBA,MAEmB;EAAA,IADhBC,IACgB;EACnB,IAAMC,KAAK,GAAGC,2BAAwB;IAAEJ,EAAF,EAAEA,EAAF;IAAMC;EAAN,CAAxBG,CAAd;;EAEA,IAAMC,OAAO,GACXC,SADID,OACJC,EADc,EAEX;IACH,IAAI,aAAaJ,IAAjB,EAAuB;MAAA;;MACrB,qBAAI,CAACG,OAAL,2EAAeC,CAAf;IACD;;IAEDH,KAAK,CAACE,OAANF,CAAcG,CAAdH;EAPF;;EAUA,OAAOI,KAAK,CAACC,aAAND,CAAoBE,aAApBF,6BACFJ,KADEI,EAEFL,IAFEK,EAGFG,kBAASC,MAATD,CAAgB;IACjBE,GAAG,EAAE;MAAEC,OAAO,EAAER;IAAX,CADY;IAEjBS,OAAO,EAAE;MAAET;IAAF;EAFQ,CAAhBK,CAHEH,EAAP;AAQD","names":["Link","to","action","rest","props","useLinkProps","onPress","e","React","createElement","Text","Platform","select","web","onClick","default"],"sources":["Link.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"script"}