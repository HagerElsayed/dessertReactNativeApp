{"ast":null,"code":"var _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useChildListeners;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction useChildListeners() {\n  var _React$useRef = React.useRef({\n    action: [],\n    focus: []\n  }),\n      listeners = _React$useRef.current;\n\n  var addListener = React.useCallback(function (type, listener) {\n    listeners[type].push(listener);\n    return function () {\n      var index = listeners[type].indexOf(listener);\n      listeners[type].splice(index, 1);\n    };\n  }, [listeners]);\n  return {\n    listeners: listeners,\n    addListener: addListener\n  };\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAOe,SAASA,iBAAT,GAA6B;EAC1C,oBAA+BC,KAAK,CAACC,MAAND,CAE5B;IACDE,MAAM,EAAE,EADP;IAEDC,KAAK,EAAE;EAFN,CAF4BH,CAA/B;EAAA,IAAiBI,SAAjB,iBAAQC,OAAR;;EAOA,IAAMC,WAAW,GAAGN,KAAK,CAACO,WAANP,CAClB,UAA8BQ,IAA9B,EAAuCC,QAAvC,EAAoE;IAElEL,SAAS,CAACI,IAAD,CAATJ,CAAgBM,IAAhBN,CAAqBK,QAArBL;IAEA,OAAO,YAAM;MAEX,IAAMO,KAAK,GAAGP,SAAS,CAACI,IAAD,CAATJ,CAAgBQ,OAAhBR,CAAwBK,QAAxBL,CAAd;MAEAA,SAAS,CAACI,IAAD,CAATJ,CAAgBS,MAAhBT,CAAuBO,KAAvBP,EAA8B,CAA9BA;IAJF;EALgB,GAYlB,CAACA,SAAD,CAZkBJ,CAApB;EAeA,OAAO;IACLI,SADK,EACLA,SADK;IAELE;EAFK,CAAP;AAID","names":["useChildListeners","React","useRef","action","focus","listeners","current","addListener","useCallback","type","listener","push","index","indexOf","splice"],"sources":["useChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      listeners[type].push(listener);\n\n      return () => {\n        // @ts-expect-error: listener should be correct type according to `type`\n        const index = listeners[type].indexOf(listener);\n\n        listeners[type].splice(index, 1);\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}