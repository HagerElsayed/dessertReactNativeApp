{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PlatformPressable;\n\nvar _extends3 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _Pressable = _interopRequireDefault(require(\"react-native-web/dist/exports/Pressable\"));\n\nvar _excluded = [\"android_ripple\", \"pressColor\", \"pressOpacity\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar ANDROID_SUPPORTS_RIPPLE = _Platform.default.OS === 'android' && _Platform.default.Version >= ANDROID_VERSION_LOLLIPOP;\n\nfunction PlatformPressable(_ref) {\n  var android_ripple = _ref.android_ripple,\n      _ref$pressColor = _ref.pressColor,\n      pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n      pressOpacity = _ref.pressOpacity,\n      _style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  return React.createElement(_Pressable.default, _extends({\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? (0, _extends3.default)({\n      color: pressColor\n    }, android_ripple) : undefined,\n    style: function style(_ref2) {\n      var pressed = _ref2.pressed;\n      return [{\n        opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1\n      }, typeof _style === 'function' ? _style({\n        pressed: pressed\n      }) : _style];\n    }\n  }, rest));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,wBAAwB,GAAG,EAAjC;AACA,IAAMC,uBAAuB,GAC3BC,kBAASC,EAATD,KAAgB,SAAhBA,IAA6BA,kBAASE,OAATF,IAAoBF,wBADnD;;AAUe,SAASK,iBAAT,OAML;EAAA,IALRC,cAKQ,QALRA,cAKQ;EAAA,2BAJRC,UAIQ;EAAA,IAJRA,UAIQ,gCAJK,oBAIL;EAAA,IAHRC,YAGQ,QAHRA,YAGQ;EAAA,IAFRC,MAEQ,QAFRA,KAEQ;EAAA,IADLC,IACK;EACR,OACEC,oBAACC,kBAAD;IACEN,cAAc,EACZL,uBAAuB;MACjBY,KAAK,EAAEN;IADU,GACKD,cADL,IAEnBQ,SAJR;IAMEL,KAAK,EAAE;MAAA,IAAGM,OAAH,SAAGA,OAAH;MAAA,OAAiB,CACtB;QAAEC,OAAO,EAAED,OAAO,IAAI,CAACd,uBAAZc,GAAsCP,YAAtCO,GAAqD;MAAhE,CADsB,EAEtB,OAAON,MAAP,KAAiB,UAAjB,GAA8BA,MAAK,CAAC;QAAEM;MAAF,CAAD,CAAnC,GAAmDN,MAF7B,CAAjB;IAAA;EANT,GAUMC,IAVN,EADF;AAcD","names":["ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","OS","Version","PlatformPressable","android_ripple","pressColor","pressOpacity","style","rest","React","Pressable","color","undefined","pressed","opacity"],"sources":["PlatformPressable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, PressableProps } from 'react-native';\n\nexport type Props = PressableProps & {\n  pressColor?: string;\n  pressOpacity?: number;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nexport default function PlatformPressable({\n  android_ripple,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  pressOpacity,\n  style,\n  ...rest\n}: Props) {\n  return (\n    <Pressable\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? { color: pressColor, ...android_ripple }\n          : undefined\n      }\n      style={({ pressed }) => [\n        { opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1 },\n        typeof style === 'function' ? style({ pressed }) : style,\n      ]}\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"script"}