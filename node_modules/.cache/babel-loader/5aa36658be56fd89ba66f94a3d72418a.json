{"ast":null,"code":"var _interopRequireDefault = require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PanGesture = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createClass.js\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\"));\n\nvar _get2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/get.js\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/inherits.js\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\"));\n\nvar _extends2 = _interopRequireDefault(require(\"/Users/mac/Developer/ReactNative/dessertReactNativeApp/node_modules/@babel/runtime/helpers/esm/extends.js\"));\n\nvar _gesture = require(\"./gesture\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY\n    };\n  }\n\n  return (0, _extends2.default)({}, current, changePayload);\n}\n\nvar PanGesture = function (_ContinousBaseGesture) {\n  (0, _inherits2.default)(PanGesture, _ContinousBaseGesture);\n\n  var _super = (0, _createSuper2.default)(PanGesture);\n\n  function PanGesture() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PanGesture);\n    _this = _super.call(this);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", {});\n\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n\n  (0, _createClass2.default)(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(PanGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n  return PanGesture;\n}(_gesture.ContinousBaseGesture);\n\nexports.PanGesture = PanGesture;","map":{"version":3,"mappings":"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","names":["changeEventCalculator","current","previous","changePayload","undefined","changeX","translationX","changeY","translationY","PanGesture","constructor","_defineProperty","handlerName","activeOffsetY","offset","Array","isArray","config","activeOffsetYStart","activeOffsetYEnd","activeOffsetX","activeOffsetXStart","activeOffsetXEnd","failOffsetY","failOffsetYStart","failOffsetYEnd","failOffsetX","failOffsetXStart","failOffsetXEnd","minPointers","maxPointers","minDistance","distance","minDist","minVelocity","velocity","minVelocityX","minVelocityY","averageTouches","value","avgTouches","enableTrackpadTwoFingerGesture","onChange","callback","handlers","ContinousBaseGesture"],"sources":["panGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport type PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"script"}